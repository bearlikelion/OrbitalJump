[gd_scene load_steps=10 format=2]

[ext_resource path="res://assets/images/circle1_n.png" type="Texture" id=1]
[ext_resource path="res://src/color.shader" type="Shader" id=2]
[ext_resource path="res://assets/fonts/Xolonium-Regular.ttf" type="DynamicFontData" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Area2D

onready var orbit_position = $Pivot/OrbitPosition

enum MODES { STATIC, LIMITED }

var radius = 100
var rotation_speed = PI
var mode = MODES.STATIC
var num_orbits = 3
var current_orbits = 0
var orbit_start = null

var jumper = null

func _ready():
    # init()	
    pass

func init(_position, _radius=radius, _mode=MODES.LIMITED):
    set_mode(_mode)
    position = _position
    radius = _radius
    $CollisionShape2D.shape = $CollisionShape2D.shape.duplicate()
    $CollisionShape2D.shape.radius = radius
    var img_size = $Sprite.texture.get_size().x / 2
    $Sprite.scale = Vector2(1, 1) * radius / img_size
    orbit_position.position.x = radius + 25
    rotation_speed *= pow(-1, randi() % 2)

func _process(delta):	
    $Pivot.rotation += rotation_speed * delta
    if mode == MODES.LIMITED and jumper:        
        check_orbits()        
        update()
        
func _draw():
    if jumper:
        var r = ((radius - 50) / num_orbits) * (1 + num_orbits - current_orbits)
        draw_circle_arc_poly(Vector2.ZERO, r, orbit_start + PI/2,
                            $Pivot.rotation + PI/2, Color(1, 0, 0))        

func capture(target):    
    jumper = target
    $AnimationPlayer.play(\"capture\")
    $Pivot.rotation = (jumper.position - position).angle()
    orbit_start = $Pivot.rotation
    
func implode():
    if !$AnimationPlayer.is_playing():
        $AnimationPlayer.play(\"implode\")
    yield($AnimationPlayer, \"animation_finished\")
    queue_free()

func set_mode(_mode):
    mode = _mode
    match mode:
        MODES.STATIC:
            $Label.hide()
        MODES.LIMITED:
            current_orbits = num_orbits
            $Label.text = str(current_orbits)
            $Label.show()

func check_orbits():
    # Check if the jumper completed a full circle
    if abs($Pivot.rotation - orbit_start) > 2 * PI:
        current_orbits -= 1
        $Label.text = str(current_orbits)        
        if current_orbits <= 0:
            jumper.die()
            jumper = null
            implode()
        orbit_start = $Pivot.rotation
        
func draw_circle_arc_poly(center, radius, angle_from, angle_to, color):
    var nb_points = 32
    var points_arc = PoolVector2Array()
    points_arc.push_back(center)
    var colors = PoolColorArray([color])

    for i in range(nb_points + 1):
        var angle_point = angle_from + i * (angle_to - angle_from) / nb_points - PI/2
        points_arc.push_back(center + Vector2(cos(angle_point), sin(angle_point)) * radius)
    draw_polygon(points_arc, colors)
"

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 2 )
shader_param/color = Color( 0, 1, 0, 1 )

[sub_resource type="DynamicFont" id=3]
size = 64
font_data = ExtResource( 3 )

[sub_resource type="CircleShape2D" id=4]
radius = 100.0

[sub_resource type="Animation" id=5]
resource_name = "capture"
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteEffect:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1.41765e-07 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteEffect:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 3, 3 ), Vector2( 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteEffect:self_modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 0.1, 0.1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[node name="Circle" type="Area2D" groups=[
"circle",
]]
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
texture = ExtResource( 1 )

[node name="SpriteEffect" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
texture = ExtResource( 1 )

[node name="Label" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -22.5
margin_top = -39.0
margin_right = 22.5
margin_bottom = 39.0
custom_fonts/font = SubResource( 3 )
text = "1"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 4 )

[node name="Pivot" type="Node2D" parent="."]

[node name="OrbitPosition" type="Position2D" parent="Pivot"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/capture = SubResource( 5 )
anims/implode = SubResource( 6 )
